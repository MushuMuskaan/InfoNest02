rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Articles collection - allow reading published articles publicly
    match /articles/{articleId} {
      // Allow public read access for published articles
      allow read: if resource.data.status == 'published';
      
      // Allow authenticated users to read their own articles (any status)
      // and admins to read all articles
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Create and update require authentication and proper role
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['infowriter', 'admin'] &&
        request.auth.uid == request.resource.data.authorId;
      allow update: if request.auth != null &&
        (request.auth.uid == resource.data.authorId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      
      // Delete requires authentication and ownership or admin role
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
    
    // Article versions collection
    match /articleVersions/{versionId} {
      allow read, write: if request.auth != null;
    }
    
    // Writer requests collection - users can read their own requests, admins can read all
    match /writerRequests/{requestId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection - users can read their own profile, admins can read/update all
    match /users/{userId} {
      // Allow users to read their own profile
      allow read: if request.auth != null && request.auth.uid == userId;

      // Allow admins to read all user profiles (simplified rule)
      allow read: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';

      // Allow user creation
      allow create: if request.auth != null && request.auth.uid == userId;

      // Allow users to update their own profile (except role)
      allow update: if request.auth != null && request.auth.uid == userId &&
        (!('role' in request.resource.data) || request.resource.data.role == resource.data.role);

      // Allow admins to update any profile including roles
      allow update: if request.auth != null &&
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Saved articles collection (for user bookmarks) - future feature
    match /savedArticles/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // User activity logs (optional for analytics)
    match /userActivity/{activityId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null &&
        (request.auth.uid == resource.data.userId ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');
    }
  }
}